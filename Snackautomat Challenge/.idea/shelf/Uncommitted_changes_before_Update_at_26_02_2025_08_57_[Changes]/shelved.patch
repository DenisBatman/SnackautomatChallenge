Index: src/ch/noseryoung/blj/ProductSort.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.noseryoung.blj;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class ProductSort {\r\n    int MAX_AMOUNT_OF_PRODUCTS = 10;\r\n    public ArrayList<Product> products;\r\n    private final String name;\r\n    private int numberOfProducts;\r\n    private final double price;\r\n    public ProductSort(String name, double price){\r\n        numberOfProducts = 0;\r\n        this.name = name;\r\n        for(int i = 0; MAX_AMOUNT_OF_PRODUCTS > i; i++){\r\n            products.add(new Product(name));\r\n            numberOfProducts++;\r\n        }\r\n        this.price = price;\r\n    }\r\n\r\n    public void fillStock(){\r\n        if(products.size() < MAX_AMOUNT_OF_PRODUCTS * 0.3){\r\n            for(int i = products.size(); MAX_AMOUNT_OF_PRODUCTS >= i; i++){\r\n                products.add(new Product(name));\r\n            }\r\n        }\r\n    }\r\n    public int getNumberOfProducts(){return numberOfProducts;}\r\n    public void setNumberOfProducts(int numberOfProducts){this.numberOfProducts = numberOfProducts;}\r\n    public String getName(){return name;}\r\n    public double getPrice() {return price;}\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ch/noseryoung/blj/ProductSort.java b/src/ch/noseryoung/blj/ProductSort.java
--- a/src/ch/noseryoung/blj/ProductSort.java	(revision f6abaa71b165a74cb1080069c086b96de2251343)
+++ b/src/ch/noseryoung/blj/ProductSort.java	(date 1740556338483)
@@ -7,7 +7,7 @@
     public ArrayList<Product> products;
     private final String name;
     private int numberOfProducts;
-    private final double price;
+    private double price;
     public ProductSort(String name, double price){
         numberOfProducts = 0;
         this.name = name;
@@ -29,6 +29,7 @@
     public void setNumberOfProducts(int numberOfProducts){this.numberOfProducts = numberOfProducts;}
     public String getName(){return name;}
     public double getPrice() {return price;}
+    public void setPrice(double price){this.price = price;}
 
 
 
Index: src/ch/noseryoung/blj/Maintence.java
===================================================================
diff --git a/src/ch/noseryoung/blj/Maintence.java b/src/ch/noseryoung/blj/Maintence.java
deleted file mode 100644
--- a/src/ch/noseryoung/blj/Maintence.java	(revision f6abaa71b165a74cb1080069c086b96de2251343)
+++ /dev/null	(revision f6abaa71b165a74cb1080069c086b96de2251343)
@@ -1,27 +0,0 @@
-package ch.noseryoung.blj;
-
-import java.util.Scanner;
-
-public class Maintence {
-    VendingMachine vendingMachine;
-    public void maintence(){
-        Scanner scanner = new Scanner(System.in);
-        System.out.println("Welcome to the Vending Machine Admin Interface!");
-        System.out.println("1. New product");
-        System.out.println("2. Fill empty machine");
-        System.out.println("3. Change price");
-        System.out.print("Your choice: ");
-        int choice = scanner.nextInt();
-        scanner.nextLine();
-        switch(choice){
-            case 1 -> // not yet added;
-            case 2 -> vendingMachine.fillEmptyMachine();
-            case 3 -> // not yet added;
-            default -> System.out.println("Invalid choice");
-        }
-
-    }
-    private void addProduct(String productName, double price){
-        vendingMachine.productSorts.add(new ProductSort(productName, price));
-    }
-}
Index: src/ch/noseryoung/blj/Type.java
===================================================================
diff --git a/src/ch/noseryoung/blj/Type.java b/src/ch/noseryoung/blj/Type.java
deleted file mode 100644
--- a/src/ch/noseryoung/blj/Type.java	(revision f6abaa71b165a74cb1080069c086b96de2251343)
+++ /dev/null	(revision f6abaa71b165a74cb1080069c086b96de2251343)
@@ -1,5 +0,0 @@
-package ch.noseryoung.blj;
-
-public enum Type {
-    COLA, SPRITE, SNICKERS, SANDWICH
-}
Index: src/ch/noseryoung/blj/Maintenance.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ch/noseryoung/blj/Maintenance.java b/src/ch/noseryoung/blj/Maintenance.java
new file mode 100644
--- /dev/null	(date 1740556338483)
+++ b/src/ch/noseryoung/blj/Maintenance.java	(date 1740556338483)
@@ -0,0 +1,117 @@
+package ch.noseryoung.blj;
+
+import java.util.InputMismatchException;
+import java.util.Objects;
+import java.util.Scanner;
+
+public class Maintenance {
+    Scanner input = new Scanner(System.in);
+    VendingMachine vendingMachine;
+
+    public Maintenance(VendingMachine vendingMachine){
+        this.vendingMachine = vendingMachine;
+    }
+
+    public void maintenanceMenu(){
+        System.out.println("Welcome to the Vending Machine Admin Interface!");
+        System.out.println("1. New product");
+        System.out.println("2. Fill empty machine");
+        System.out.println("3. Change price");
+        System.out.println("4. Exchange product");
+        System.out.println("5. Delete product");
+        System.out.println("6. Change credit of customer");
+        System.out.print("Your choice: ");
+        int choice = input.nextInt();
+        input.nextLine();
+        switch(choice){
+            case 1 -> addProduct();
+            case 2 -> vendingMachine.fillEmptyMachine();
+            case 3 -> changePrice();
+            case 4 -> exchangeProduct();
+            case 5 -> deleteProduct();
+            case 6 -> changeCustomerCredit();
+            default -> System.out.println("Invalid choice");
+        }
+
+    }
+    private void addProduct(){
+        System.out.println("What should be the new products name?");
+        String productName = input.nextLine();
+        double price = getPriceFromUser(productName);
+        vendingMachine.productSorts.add(new ProductSort(productName, price));
+    }
+    private void changePrice(){
+        boolean priceChanged = false;
+        System.out.println("Which products price do you want to change?");
+        String productName = input.nextLine();
+        double price = getPriceFromUser(productName);
+
+        for(ProductSort productSort : vendingMachine.productSorts){
+            if(Objects.equals(productSort.getName(), productName)){
+                productSort.setPrice(price);
+                System.out.printf("The new Price is %.2f", price);
+                priceChanged = true;
+            }
+        }
+        if(!priceChanged){
+            System.out.println("There is no such product");
+        }
+    }
+    private void exchangeProduct(){
+        boolean productExchanged = false;
+        System.out.println("Which existing product do you want to exchange?");
+        String oldProductName = input.nextLine();
+        for(ProductSort productSort : vendingMachine.productSorts){
+            if(Objects.equals(productSort.getName(), oldProductName)){
+                System.out.println("What should be the new products name?");
+                String newProductName = input.nextLine();
+                double newPrice = getPriceFromUser(newProductName);
+                vendingMachine.productSorts.remove(productSort);
+                vendingMachine.productSorts.add(new ProductSort(newProductName, newPrice));
+                productExchanged = true;
+                break;
+            }
+        }
+        if(!productExchanged){
+            System.out.println("No such product.");
+        }
+    }
+    private void deleteProduct(){
+        boolean productDeleted = false;
+        System.out.println("Which product do you want to delete?");
+        String productName = input.nextLine();
+        for(ProductSort productSort : vendingMachine.productSorts) {
+            if (Objects.equals(productSort.getName(), productName)) {
+                productDeleted = true;
+                vendingMachine.productSorts.remove(productSort);
+                break;
+            }
+        }
+        if(!productDeleted){
+            System.out.println("There is no such product.");
+        }
+
+    }
+    private double getPriceFromUser(String productName){
+        System.out.printf("What should be the price of %s?", productName);
+        return  input.nextDouble();
+    }
+    private void changeCustomerCredit(){
+        boolean changedCustomerCredit = false;
+        System.out.println("Which customer's credit should be edited");
+        String customerName = input.nextLine();
+        for(Customer customer : Menu.customers) {
+            if (Objects.equals(customer.getName(), customerName)) {
+                System.out.println("What should be the new credit?");
+                double credit = input.nextDouble();
+                if(credit > 0){
+                    customer.setCredit(credit);
+                    changedCustomerCredit = true;
+                }
+            }
+        }
+        if(!changedCustomerCredit){
+            System.out.println("Invalid input!");
+        }
+    }
+}
Index: src/ch/noseryoung/blj/Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.noseryoung.blj;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Objects;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Menu {\r\n    ArrayList<Customer> customers = new ArrayList<>();\r\n    VendingMachine vendingMachine;\r\n    Scanner input = new Scanner(System.in);\r\n\r\n    public Menu(VendingMachine vendingMachine){\r\n        this.vendingMachine = vendingMachine;\r\n    }\r\n\r\n    public void startMenu(){\r\n\r\n        System.out.println(\"Are you a customer(0) or an employee(other numba)?\");\r\n        if(input.nextInt() == 0){\r\n            System.out.println(\"Enter your Name: \");\r\n            String name = input.nextLine();\r\n            if(!isAlreadyCustomer(name)){\r\n                customers.add(new Customer(name));\r\n            }\r\n            for(Customer customer : customers){\r\n                if(Objects.equals(customer.getName(), name)){\r\n                    customerMenu(customer);\r\n                }\r\n            }\r\n        } else {\r\n            //ask for password \r\n        }\r\n    }\r\n\r\n\r\n    public void customerMenu(Customer customer){\r\n        Scanner input = new Scanner(System.in);\r\n        System.out.println(\"What product do you want to buy?\");\r\n        for(ProductSort productSort : vendingMachine.productSorts){\r\n            System.out.println(productSort.getName());\r\n        }\r\n        String productName = input.nextLine();\r\n        for (ProductSort productSort : vendingMachine.productSorts){\r\n            if(Objects.equals(productSort.getName(), productName)){\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n    public boolean isAlreadyCustomer(String name) {\r\n        for(Customer customer : customers){\r\n            if(Objects.equals(customer.getName(), name)){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ch/noseryoung/blj/Menu.java b/src/ch/noseryoung/blj/Menu.java
--- a/src/ch/noseryoung/blj/Menu.java	(revision f6abaa71b165a74cb1080069c086b96de2251343)
+++ b/src/ch/noseryoung/blj/Menu.java	(date 1740556338483)
@@ -1,23 +1,25 @@
 package ch.noseryoung.blj;
 
 import java.util.ArrayList;
+import java.util.List;
 import java.util.Objects;
 import java.util.Scanner;
-
+import javax.smartcardio.*;
 
 public class Menu {
-    ArrayList<Customer> customers = new ArrayList<>();
+
+    static ArrayList<Customer> customers = new ArrayList<>();
     VendingMachine vendingMachine;
     Scanner input = new Scanner(System.in);
 
-    public Menu(VendingMachine vendingMachine){
+    public Menu(VendingMachine vendingMachine) {
         this.vendingMachine = vendingMachine;
-    }
+
 
     public void startMenu(){
-
         System.out.println("Are you a customer(0) or an employee(other numba)?");
         if(input.nextInt() == 0){
+            input.nextLine(); // Clear buffer
             System.out.println("Enter your Name: ");
             String name = input.nextLine();
             if(!isAlreadyCustomer(name)){
@@ -29,10 +31,73 @@
                 }
             }
         } else {
-            //ask for password 
+            if(authentification()){
+                Maintenance maintenance = new Maintenance(vendingMachine);
+                maintenance.maintenanceMenu();
+            }
+        }
+    }
+
+    boolean authentification(){
+        System.out.println("Put your NFC tag on the reader...");
+
+        try {
+            TerminalFactory factory = TerminalFactory.getDefault();
+            List<CardTerminal> terminals = factory.terminals().list();
+
+            if (terminals.isEmpty()) {
+                System.out.println("No NFC reader found.");
+                return false;
+            }
+
+            CardTerminal terminal = terminals.get(0);
+            System.out.println("Using NFC Reader: " + terminal.getName());
+
+            // wait for nfc tag
+            terminal.waitForCardPresent(0);
+
+            // Connect to the NFC tag
+            Card card = terminal.connect("*");
+            CardChannel channel = card.getBasicChannel();
+
+            // get the card UID
+            byte[] commandUID = new byte[]{(byte) 0xFF, (byte) 0xCA, (byte) 0x00, (byte) 0x00, (byte) 0x00};
+            CommandAPDU command = new CommandAPDU(commandUID);
+            ResponseAPDU response = channel.transmit(command);
+
+            byte[] uid = response.getData();
+            String uidString = bytesToHex(uid);
+
+            System.out.println("Detected Card UID: " + uidString);
+
+
+            if (isAdminCard(uidString)) {
+                System.out.println("Authentication successful. Access granted.");
+                return true;
+            } else {
+                System.out.println("You don't have admin permissions.");
+                System.out.println("If you believe this is a mistake, contact Admin (admin@snack.ch)");
+                return false;
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+            return false;
         }
     }
 
+    private boolean isAdminCard(String uid) {
+        // List of admin NFC card UIDs
+        List<String> adminUIDs = List.of("04 A1 B2 C3 D4", "AB CD EF 12 34");
+        return adminUIDs.contains(uid);
+    }
+
+    private String bytesToHex(byte[] bytes) {
+        StringBuilder hexString = new StringBuilder();
+        for (byte b : bytes) {
+            hexString.append(String.format("%02X ", b));
+        }
+        return hexString.toString().trim();
+    }
 
     public void customerMenu(Customer customer){
         Scanner input = new Scanner(System.in);
@@ -47,7 +112,9 @@
             }
         }
 
+
     }
+
     public boolean isAlreadyCustomer(String name) {
         for(Customer customer : customers){
             if(Objects.equals(customer.getName(), name)){
